// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: m28RWVuqnHm6JV8qju1gwB
// Component: 5vH0-NF8KOYe

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdMenu } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu";

import { useScreenVariants as useScreenVariantsmsj4S4TFxT5 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: msj_4S4TFxT5/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: m28RWVuqnHm6JV8qju1gwB/projectcss
import sty from "./PlasmicNavigation.module.css"; // plasmic-import: 5vH0-NF8KOYe/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: w_25Cc3UB_Ay/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: ZQ0UacQ0cxIG/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: O10ZwLLlc69J/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: benU1EbYzjVA/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: hz_w-Y8H4Cjo/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: -xMz1ejutXlM/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: U3S01wtIK44v/icon

createPlasmicElementProxy;

export type PlasmicNavigation__VariantMembers = {};
export type PlasmicNavigation__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavigation__VariantsArgs;
export const PlasmicNavigation__VariantProps = new Array<VariantPropType>();

export type PlasmicNavigation__ArgsType = {};
type ArgPropType = keyof PlasmicNavigation__ArgsType;
export const PlasmicNavigation__ArgProps = new Array<ArgPropType>();

export type PlasmicNavigation__OverridesType = {
  root?: Flex__<typeof AntdMenu>;
};

export interface DefaultNavigationProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNavigation__RenderFunc(props: {
  variants: PlasmicNavigation__VariantsArgs;
  args: PlasmicNavigation__ArgsType;
  overrides: PlasmicNavigation__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsmsj4S4TFxT5()
  });

  return (
    <AntdMenu
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
      expandIcon={null}
      mode={
        hasVariant(globalVariants, "screen", "mobileOnly")
          ? "horizontal"
          : undefined
      }
    >
      <AntdMenuItem
        className={classNames("__wab_instance", sty.menuItem__enwjT)}
        key={"menuItemKey0"}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__wXid2
          )}
        >
          {"StarterKit"}
        </div>
      </AntdMenuItem>
      <AntdMenuItem
        className={classNames("__wab_instance", sty.menuItem__vDj6)}
        key={"menuItemKey1"}
        onClick={async () => {
          const $steps = {};

          $steps["goToHomepage"] = true
            ? (() => {
                const actionArgs = {};
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __nextRouter?.push(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["goToHomepage"] != null &&
            typeof $steps["goToHomepage"] === "object" &&
            typeof $steps["goToHomepage"].then === "function"
          ) {
            $steps["goToHomepage"] = await $steps["goToHomepage"];
          }
        }}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___2REov)}
        >
          <IconIcon
            className={classNames(projectcss.all, sty.svg__xufvs)}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__amz60
            )}
          >
            {"Dashboard"}
          </div>
        </Stack__>
      </AntdMenuItem>
      <AntdMenuItem
        className={classNames("__wab_instance", sty.menuItem___3KVhk)}
        key={"menuItemKey2"}
        onClick={async () => {
          const $steps = {};

          $steps["goToJobPostings"] = true
            ? (() => {
                const actionArgs = {};
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __nextRouter?.push(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["goToJobPostings"] != null &&
            typeof $steps["goToJobPostings"] === "object" &&
            typeof $steps["goToJobPostings"].then === "function"
          ) {
            $steps["goToJobPostings"] = await $steps["goToJobPostings"];
          }
        }}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__n3K8)}
        >
          <Icon2Icon
            className={classNames(projectcss.all, sty.svg__lQiKn)}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__rMtWw
            )}
          >
            {"Job Postings"}
          </div>
        </Stack__>
      </AntdMenuItem>
      <AntdMenuItem
        className={classNames("__wab_instance", sty.menuItem___1FJqz)}
        key={"menuItemKey3"}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___8PzmD)}
        >
          <Icon3Icon
            className={classNames(projectcss.all, sty.svg__anjai)}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__x4L
            )}
          >
            {"Candidate Pipeline"}
          </div>
        </Stack__>
      </AntdMenuItem>
      <AntdMenuItem
        className={classNames("__wab_instance", sty.menuItem__eyb6)}
        key={"menuItemKey4"}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__aS78)}
        >
          <Icon4Icon
            className={classNames(projectcss.all, sty.svg__vr5Bz)}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__vopP
            )}
          >
            {"Interview Scheduling"}
          </div>
        </Stack__>
      </AntdMenuItem>
      <AntdMenuItem
        className={classNames("__wab_instance", sty.menuItem___4NXe)}
        key={"menuItemKey5"}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__snM0P)}
        >
          <Icon5Icon
            className={classNames(projectcss.all, sty.svg__pW9TY)}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__nUfF
            )}
          >
            {"Reports"}
          </div>
        </Stack__>
      </AntdMenuItem>
      <div className={classNames(projectcss.all, sty.freeBox___3N9)} />

      {(() => {
        try {
          return !currentUser.isLoggedIn;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <AntdMenuItem
          className={classNames("__wab_instance", sty.menuItem___0Fo52)}
          key={"menuItemKey6"}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__gl1Hm)}
          >
            <Icon6Icon
              className={classNames(projectcss.all, sty.svg___7Tfv4)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__hwkwk
              )}
            >
              {"Log in"}
            </div>
          </Stack__>
        </AntdMenuItem>
      ) : null}
      {(() => {
        try {
          return currentUser.isLoggedIn;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <AntdMenuItem
          className={classNames("__wab_instance", sty.menuItem__sTiBl)}
          key={"menuItemKey7"}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__pKe9Q)}
          >
            <Icon6Icon
              className={classNames(projectcss.all, sty.svg__mxo5U)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___6EgKs
              )}
            >
              {"Log out"}
            </div>
          </Stack__>
        </AntdMenuItem>
      ) : null}
      <AntdMenuItem
        className={classNames("__wab_instance", sty.menuItem__x9Kod)}
        key={"menuItemKey8"}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__qp953)}
        >
          <Icon6Icon
            className={classNames(projectcss.all, sty.svg__hR0AK)}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__dEioq
            )}
          >
            {"Messages"}
          </div>
        </Stack__>
      </AntdMenuItem>
      <AntdMenuItem
        className={classNames("__wab_instance", sty.menuItem__sPez9)}
        key={"menuItemKey9"}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__pBTkY)}
        >
          <Icon7Icon
            className={classNames(projectcss.all, sty.svg__c2Ps6)}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__tFbxq
            )}
          >
            {"Settings"}
          </div>
        </Stack__>
      </AntdMenuItem>
    </AntdMenu>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof AntdMenu;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavigation__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavigation__VariantsArgs;
    args?: PlasmicNavigation__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavigation__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNavigation__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavigation__ArgProps,
          internalVariantPropNames: PlasmicNavigation__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavigation__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavigation";
  } else {
    func.displayName = `PlasmicNavigation.${nodeName}`;
  }
  return func;
}

export const PlasmicNavigation = Object.assign(
  // Top-level PlasmicNavigation renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicNavigation
    internalVariantProps: PlasmicNavigation__VariantProps,
    internalArgProps: PlasmicNavigation__ArgProps
  }
);

export default PlasmicNavigation;
/* prettier-ignore-end */
